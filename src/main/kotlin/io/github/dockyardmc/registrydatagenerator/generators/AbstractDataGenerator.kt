package io.github.dockyardmc.registrydatagenerator.generators

import io.github.dockyardmc.registrydatagenerator.DataGenerator
import java.io.ByteArrayOutputStream
import java.io.File
import java.util.zip.GZIPOutputStream

abstract class AbstractDataGenerator<T>(val name: String, val objectName: String, val registryClassName: String) : DataGenerator {

    val values: MutableMap<String, T> = mutableMapOf<String, T>()
    val file = File("./out/$name.json.gz")
    val objectFile = File("./out/classes/$objectName.kt")

    fun writeFile(encode: () -> String) {
        val encodedJson = encode.invoke()
        val compressedData = ByteArrayOutputStream()

        val gzipOutputStream = GZIPOutputStream(compressedData)

        gzipOutputStream.write(encodedJson.toByteArray())
        gzipOutputStream.close()

        file.writeBytes(compressedData.toByteArray())

        val contents = buildString {
            append("package io.github.dockyardmc.registry\n")
            append("\n")
            append("import io.github.dockyardmc.registry.registries.$registryClassName\n")
            append("\n")
            append("\n// THIS CLASS IS AUTOMATICALLY GENERATED BY THE REGISTRY DATA GENERATOR")
            append("\n")
            append("object $objectName {\n")
            values.forEach { value ->
                val location = value.key.replace("minecraft:", "")
                val path = "minecraft:${location}"
                var variableName = location.replace(".", "_").uppercase()
                when(variableName) {
                    "11" -> variableName = "ELEVEN"
                    "13" -> variableName = "THIRTEEN"
                    "5" -> variableName = "FIVE"
                }

                append("    val $variableName = $registryClassName[\"${path}\"]\n")
            }
            append("}\n")
        }
        objectFile.writeText(contents)
    }
}